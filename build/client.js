(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
var core;

core = {
  engine: require('./engine.js'),
  net: require('./net/net.js'),
  voice: require('./voice.js')
};

module.exports = core;

},{"./engine.js":2,"./net/net.js":5,"./voice.js":7}],2:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
Matter.RenderPixi = require('../matter/render.js');

module.exports = Matter.Engine.create(document.body, {
  world: {
    gravity: {
      x: 0,
      y: 0
    }
  },
  enableSleeping: true,
  render: {
    controller: Matter.RenderPixi,
    options: {
      width: window.w,
      height: window.h,
      wireframes: false,
      background: '#ccc'
    }
  }
});

},{"../matter/render.js":18}],3:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
var config;

config = {
  protocol: 'ws',
  address: 'localhost',
  port: 10101
};

module.exports = config;

},{}],4:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
var mask, masks;

masks = {
  'ping': 0,
  'sync': 1,
  'fullSync': 2
};

mask = function(a) {
  var k, v;
  switch (typeof a) {
    case 'string':
      return masks[a];
    case 'number':
      for (k in masks) {
        v = masks[k];
        masks[v] = k;
      }
      return masks[a];
  }
};

module.exports = mask;

},{}],5:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
var config, engine, net, serializer, utils;

utils = require('../../utils/utils.js');

serializer = utils.serializer;

engine = require('../engine.js');

config = require('./config.js');

net = {
  start: function() {
    return net.socket.onmessage = function(e) {
      var i, j, k, len, len1, ref, ref1, results, str, world;
      switch (net.mask(new Uint8Array(e.data, 0, 1)[0])) {
        case 'ping':
          return net.ping.update(e.data);
        case 'fullSync':
          str = '';
          ref = new Uint8Array(e.data, 1);
          for (j = 0, len = ref.length; j < len; j++) {
            i = ref[j];
            str += String.fromCharCode(i);
          }
          world = serializer.parse(str);
          engine.world.gravity = world.gravity;
          Matter.Composite.clear(engine.world);
          ref1 = world.bodies;
          results = [];
          for (k = 0, len1 = ref1.length; k < len1; k++) {
            i = ref1[k];
            results.push(utils.addToWorld(Matter.Body.create({
              bounds: i.bounds,
              position: i.position,
              angle: i.angle,
              vertices: i.vertices,
              parts: i.parts,
              isStatic: i.isStatic,
              isSleeping: i.isSleeping
            })));
          }
          return results;
      }
    };
  },
  mask: require('./mask.js'),
  socket: require('./socket.js'),
  id: null,
  protocol: config.protocol,
  address: config.address,
  port: config.port,
  ping: 0
};

module.exports = net;

},{"../../utils/utils.js":21,"../engine.js":2,"./config.js":3,"./mask.js":4,"./socket.js":6}],6:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
var config, socket;

config = require('./config.js');

socket = new WebSocket(config.protocol + "://" + config.address + ":" + config.port);

socket.binaryType = 'arraybuffer';

module.exports = socket;

},{"./config.js":3}],7:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
var voice;

voice = {
  start: function() {
    voice._setPrefixes();
    if (voice._supportGetUserMedia()) {
      return navigator.getUserMedia({
        'audio': {
          'mandatory': {
            'googEchoCancellation': true,
            'googNoiseSuppression': true,
            'googHighpassFilter': true,
            'googAutoGainControl': true
          }
        }
      }, voice.analyze, voice.error);
    } else {
      return console.log('Can\'t find navigator.getUserMedia()!');
    }
  },
  analyze: function(stream) {
    var audioContext, mediaStreamSource;
    window.AudioContext = window.AudioContext || window.webkitAudioContext;
    audioContext = new AudioContext();
    mediaStreamSource = audioContext.createMediaStreamSource(stream);
    voice.analyser = audioContext.createAnalyser();
    voice.analyser.fftSize = 2048;
    return mediaStreamSource.connect(voice.analyser);
  },
  update: function() {
    var array, i, j, len;
    array = new Uint8Array(voice.analyser.frequencyBinCount);
    voice.analyser.getByteFrequencyData(array);
    voice.average = 0;
    for (j = 0, len = array.length; j < len; j++) {
      i = array[j];
      voice.average += parseFloat(i);
    }
    voice.average = voice.average / array.length;
    return console.log(voice.average);
  },
  error: function(e) {
    return console.log(e);
  },
  _setPrefixes: function() {
    return navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;
  },
  _supportGetUserMedia: function() {
    return !!navigator.getUserMedia;
  },
  analyser: null,
  average: 0
};

module.exports = voice;

},{}],8:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
var Character, Vector, config, utils;

Vector = require('../global/vector.js');

utils = require('../utils/utils.js');

config = require('./config.js');

Character = (function() {
  function Character(id, angle, x, y) {
    this.id = id;
    if (angle == null) {
      angle = 0;
    }
    if (x == null) {
      x = 0;
    }
    if (y == null) {
      y = 0;
    }
    this.body = Matter.Bodies.rectangle(x, y, 100, 100, {
      angle: angle,
      mass: 100,
      frictionAir: 0.25
    });
    this.mult = 1.5;
    utils.addToWorld(this.body);
    config.characters[this.id] = this;
  }

  Character.prototype.rotate = function(a) {
    return this.body.angle = a;
  };

  Character.prototype.move = function(d) {
    switch (d) {
      case 'up':
        return Matter.Body.applyForce(this.body, {
          x: 0,
          y: 0
        }, Vector.mult(Vector.fromAngle(this.body.angle), this.mult));
      case 'down':
        return Matter.Body.applyForce(this.body, {
          x: 0,
          y: 0
        }, Vector.neg(Vector.mult(Vector.fromAngle(this.body.angle), this.mult)));
    }
  };

  return Character;

})();

module.exports = Character;

},{"../global/vector.js":17,"../utils/utils.js":21,"./config.js":9}],9:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
var config;

config = {
  time: 0,
  characters: []
};

module.exports = config;

},{}],10:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
var Text, debug;

Text = require('./text.js');

debug = {
  start: function() {
    var f;
    debug._text = new Text('sand 0.0.1', 22, 0x000000, 0, 0, true);
    f = new PIXI.filters.PixelateFilter();
    f.size.x = f.size.y = 2;
    return debug._text.filters = [f];
  },
  update: function(fps, ping, voice, playerX, playerY) {
    debug._text.text = "sand 0.0.1\nfps: " + (Math.round(fps)) + "\nping: " + ping + "\nvoice: " + (Math.round(voice)) + "\nx: " + (Math.round(playerX)) + "\ny: " + (Math.round(playerY));
    debug._text.position.x = playerX - window.w / 2 + 12;
    return debug._text.position.y = playerY - window.h / 2 + 12;
  },
  _text: null
};

module.exports = debug;

},{"./text.js":14}],11:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
var engine, filters;

engine = require('../core/engine.js');

filters = {
  enable: function() {
    filters.pixelate = new PIXI.filters.PixelateFilter();
    filters.color = new PIXI.filters.ColorMatrixFilter();
    filters.color.matrix = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
    return engine.render.container.filters = [filters.pixelate];
  },
  disable: function() {
    return engine.render.container.filters = [];
  },
  update: function(time) {
    if (engine.render.container.filters) {
      filters.color.matrix[2] = Math.sin(time * 2);
      return filters.color.matrix[6] = Math.cos(time * 2);
    }
  }
};

module.exports = filters;

},{"../core/engine.js":2}],12:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
var config, game;

config = require('./config.js');

game = {
  Character: require('./character.js'),
  debug: require('./debug.js'),
  filters: require('./filters.js'),
  Player: require('./player.js'),
  Text: require('./text.js'),
  time: config.time,
  characters: config.characters
};

module.exports = game;

},{"./character.js":8,"./config.js":9,"./debug.js":10,"./filters.js":11,"./player.js":13,"./text.js":14}],13:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
var Character, Player, Vector,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Vector = require('../global/vector.js');

Character = require('./character.js');

Player = (function(superClass) {
  extend(Player, superClass);

  function Player() {
    Player.__super__.constructor.call(this);
    window.onmousemove = (function(_this) {
      return function(e) {
        var a;
        a = Vector.toAngle(e.x, e.y, window.w, window.h);
        return _this.rotate(a);
      };
    })(this);
    window.onkeydown = (function(_this) {
      return function(e) {
        var d;
        d = '';
        switch (e.keyCode) {
          case 87:
          case 38:
            d = 'up';
            break;
          case 83:
          case 40:
            d = 'down';
        }
        return _this.move(d);
      };
    })(this);
  }

  return Player;

})(Character);

module.exports = Player;

},{"../global/vector.js":17,"./character.js":8}],14:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
var Text, engine;

engine = require('../core/engine.js');

Text = (function() {
  function Text(text, size, color, x, y, isBold, isItalic, font) {
    var style, t;
    if (isBold == null) {
      isBold = false;
    }
    if (isItalic == null) {
      isItalic = false;
    }
    if (font == null) {
      font = 'Arial';
    }
    style = '';
    if (isBold) {
      style += 'bold ';
    }
    if (isItalic) {
      style += 'italic ';
    }
    style += size + 'px ';
    style += font;
    t = new PIXI.Text(text, {
      font: style,
      fill: color
    });
    t.position.x = x;
    t.position.y = y;
    engine.render.textContainer.addChild(t);
    return t;
  }

  return Text;

})();

module.exports = Text;

},{"../core/engine.js":2}],15:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
Math.randomInt = function(min, max) {
  return Math.floor(Math.random() * (max - min + 1) + min);
};

Math.radiansToDegrees = function(r) {
  return r * (180 / Math.PI);
};

Math.degreesToRadians = function(d) {
  return d * (Math.PI / 180);
};

module.exports = Math;

},{}],16:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
var Math;

Math = require('./math.js');

String.prototype.random = function() {
  return this[Math.randomInt(0, this.length - 1)];
};

module.exports = String;

},{"./math.js":15}],17:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
var Vector;

Vector = Matter.Vector;

Vector.fromAngle = function(a) {
  a -= Math.PI / 2;
  return {
    x: Math.cos(a),
    y: Math.sin(a)
  };
};

Vector.toAngle = function(x, y, w, h) {
  return Math.atan2(h / 2 - y, w / 2 - x) - Math.PI / 2;
};

module.exports = Vector;

},{}],18:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
var Bounds, Common, Composite, RenderPixi, Vector;

RenderPixi = Matter.RenderPixi;

Common = Matter.Common;

Composite = Matter.Composite;

Vector = Matter.Vector;

Bounds = Matter.Bounds;

RenderPixi.create = function(options) {
  var defaults, render, transparent;
  defaults = {
    controller: RenderPixi,
    element: null,
    canvas: null,
    options: {
      width: 800,
      height: 600,
      background: '#fafafa',
      wireframeBackground: '#222',
      hasBounds: false,
      enabled: true,
      wireframes: true,
      showSleeping: true,
      showDebug: false,
      showBroadphase: false,
      showBounds: false,
      showVelocity: false,
      showCollisions: false,
      showAxes: false,
      showPositions: false,
      showAngleIndicator: false,
      showIds: false,
      showShadows: false
    }
  };
  render = Common.extend(defaults, options);
  transparent = !render.options.wireframes && render.options.background === 'transparent';
  render.context = new PIXI.WebGLRenderer(render.options.width, render.options.height, {
    view: render.canvas,
    transparent: transparent,
    antialias: true,
    backgroundColor: options.background
  });
  render.canvas = render.context.view;
  render.container = new PIXI.Container();
  render.bounds = render.bounds || {
    min: {
      x: 0,
      y: 0
    },
    max: {
      x: render.options.width,
      y: render.options.height
    }
  };
  render.textures = {};
  render.sprites = {};
  render.primitives = {};
  render.spriteContainer = new PIXI.Container();
  render.textContainer = new PIXI.Container();
  render.container.addChild(render.spriteContainer);
  render.container.addChild(render.textContainer);
  if (Common.isElement(render.element)) {
    render.element.appendChild(render.canvas);
  } else {
    Common.log('No "render.element" passed, "render.canvas" was not inserted into document.', 'warn');
  }
  render.canvas.oncontextmenu = function() {
    return false;
  };
  render.canvas.onselectstart = function() {
    return false;
  };
  return render;
};

RenderPixi.clear = function(render) {
  var bgSprite, container, i, j, k, len, len1, ref, ref1, spriteContainer;
  container = render.container;
  spriteContainer = render.spriteContainer;
  ref = container.children;
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    container.removeChild(i);
  }
  ref1 = spriteContainer.children;
  for (k = 0, len1 = ref1.length; k < len1; k++) {
    i = ref1[k];
    spriteContainer.removeChild(i);
  }
  bgSprite = render.sprites['bg-0'];
  render.textures = {};
  render.sprites = {};
  render.primitives = {};
  render.sprites['bg-0'] = bgSprite;
  if (bgSprite) {
    container.addChildAt(bgSprite, 0);
  }
  render.container.addChild(render.spriteContainer);
  render.container.addChild(render.textContainer);
  render.currentBackground = null;
  container.scale.set(1, 1);
  return container.position.set(0, 0);
};

RenderPixi.world = function(engine) {
  var allConstraints, bodies, body, bodyA, bodyB, boundsHeight, boundsScaleX, boundsScaleY, boundsWidth, constraint, constraints, container, context, j, k, l, len, len1, len2, len3, len4, m, n, options, pointAWorld, pointBWorld, ref, render, text, world;
  render = engine.render;
  world = engine.world;
  context = render.context;
  container = render.container;
  options = render.options;
  bodies = Composite.allBodies(world);
  allConstraints = Composite.allConstraints(world);
  constraints = [];
  if (options.wireframes) {
    RenderPixi.setBackground(render, options.wireframeBackground);
  } else {
    RenderPixi.setBackground(render, options.background);
  }
  boundsWidth = render.bounds.max.x - render.bounds.min.x;
  boundsHeight = render.bounds.max.y - render.bounds.min.y;
  boundsScaleX = boundsWidth / render.options.width;
  boundsScaleY = boundsHeight / render.options.height;
  if (options.hasBounds) {
    for (j = 0, len = bodies.length; j < len; j++) {
      body = bodies[j];
      body.render.sprite.visible = Bounds.overlaps(body.bounds, render.bounds);
    }
    for (k = 0, len1 = allConstraints.length; k < len1; k++) {
      constraint = allConstraints[k];
      bodyA = constraint.bodyA;
      bodyB = constraint.bodyB;
      pointAWorld = constraint.pointA;
      pointBWorld = constraint.pointB;
      if (bodyA) {
        pointAWorld = Vector.add(bodyA.position, constraint.pointA);
      }
      if (bodyB) {
        pointBWorld = Vector.add(bodyB.position, constraint.pointB);
      }
      if (!pointAWorld || !pointBWorld) {
        continue;
      }
      if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld)) {
        constraints.push(constraint);
      }
    }
    container.scale.set(1 / boundsScaleX, 1 / boundsScaleY);
    container.position.set(-render.bounds.min.x * (1 / boundsScaleX), -render.bounds.min.y * (1 / boundsScaleY));
  } else {
    constraints = allConstraints;
  }
  for (l = 0, len2 = bodies.length; l < len2; l++) {
    body = bodies[l];
    RenderPixi.body(engine, body);
  }
  for (m = 0, len3 = constraints.length; m < len3; m++) {
    constraint = constraints[m];
    RenderPixi.constraint(engine, constraint);
  }
  ref = render.textContainer.children;
  for (n = 0, len4 = ref.length; n < len4; n++) {
    text = ref[n];
    render.textContainer.addChildAt(text, 0);
  }
  return context.render(container);
};

module.exports = RenderPixi;

},{}],19:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
var Player, core, debug, engine, filters, game, net, player, voice;

window.w = window.innerWidth;

window.h = window.innerHeight;

core = require('./core/core.js');

game = require('./game/game.js');

engine = core.engine;

Player = game.Player;

debug = game.debug;

net = core.net;

voice = core.voice;

filters = game.filters;

Matter.Engine.run(engine);

player = new Player(window.w / 2, window.h / 2);

debug.start();

net.start();

engine.render.gl = new PIXI.Graphics();

setTimeout(function() {
  return engine.render.container.addChild(engine.render.gl);
}, 5000);

engine.render.options.hasBounds = true;

Matter.Events.on(engine, 'tick', function(e) {
  game.time += 0.01;
  Matter.Bounds.shift(engine.render.bounds, {
    x: player.body.position.x - window.w / 2,
    y: player.body.position.y - window.h / 2
  });
  filters.update(game.time);
  return debug.update(engine.timing.fps, net.ping.value, voice.average, player.body.position.x, player.body.position.y);
});

},{"./core/core.js":1,"./game/game.js":12}],20:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
var serializer;

serializer = new Resurrect({
  prefix: '$',
  cleanup: true
});

serializer.parse = serializer.resurrect;

serializer.serialise = function(object, indent) {
  if (indent == null) {
    indent = 0;
  }
  return serializer.stringify(object, function(key, value) {
    var fixed;
    if (!/^#/.exec(key) && typeof value === 'number') {
      fixed = parseFloat(value.toFixed(3));
      if (fixed === 0 && value !== 0) {
        return value;
      }
      return fixed;
    }
    return value;
  }, indent);
};

module.exports = serializer;

},{}],21:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
var String, engine, utils;

String = require('../global/string.js');

engine = require('../core/engine.js');

utils = {
  serializer: require('./serializer.js'),
  cloneObject: function(object) {
    return utils.serializer.parse(utils.serializer.serialise(object));
  },
  objectsDiff: function(a, b) {
    var ak, bk, i, j, k, len, len1, r, v;
    a = a.toObject('id');
    b = b.toObject('id');
    ak = Object.keys(a);
    bk = Object.keys(b);
    r = {
      added: [],
      changed: [],
      removed: []
    };
    for (i = 0, len = ak.length; i < len; i++) {
      k = ak[i];
      if (bk.indexOf(k === -1)) {
        r.removed.push(k);
      }
    }
    for (j = 0, len1 = bk.length; j < len1; j++) {
      k = bk[j];
      if (ak.indexOf(k === -1)) {
        r.added.push(k);
      }
    }
    for (k in a) {
      v = a[k];
      if (a[k] !== b[k]) {
        r.changed.push(k);
      }
    }
    return r;
  },
  addToWorld: function(b) {
    return Matter.World.add(engine.world, b);
  },
  removeFromWorld: function(b) {
    return Matter.World.remove(engine.world, b);
  },
  log: function(m) {
    var d;
    d = new Date;
    return console.log("[" + (d.getMonth() + 1) + "." + (d.getDate()) + "." + (d.getFullYear()) + ", " + (d.getHours()) + ":" + (d.getMinutes()) + ":" + (d.getSeconds()) + "] " + m);
  },
  randomString: function(length, numbers) {
    var i, letters, ref, result;
    if (numbers == null) {
      numbers = true;
    }
    letters = 'abcdefghijklmnopqrstuvwxyz';
    result = '';
    if (numbers) {
      letters += '0123456789';
    }
    for (i = 0, ref = length; 0 <= ref ? i <= ref : i >= ref; 0 <= ref ? i++ : i--) {
      result += letters.random();
    }
    return result;
  }
};

module.exports = utils;

},{"../core/engine.js":2,"../global/string.js":16,"./serializer.js":20}]},{},[19]);
